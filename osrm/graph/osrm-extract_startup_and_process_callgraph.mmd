%% Call below command to convert .mmd to .png
%%  Adjust -w or -H if necessary
%% mmdc -p puppeteer-config.json -i osrm-extract_startup_and_process_callgraph.mmd -o osrm-extract_startup_and_process_callgraph.mmd.png -w 3840 -H 2160

graph TD

Main["src/tools/extract.cpp: main()"] -. call .-> parseArguments["src/tools/extract.cpp: parseArguments()"]

subgraph Main Function Flow Chart
    parseArguments --> osrm_extract["src/osrm/extractor.cpp: osrm::extract()<p></p>    - Runs extraction process"]
end

osrm_extract -. call .-> Sol2ScriptingEnvironment["include/extractor/scripting_environment_lua.hpp: <p></p> Sol2ScriptingEnvironment::Sol2ScriptingEnvironment() <p></p> - construct Lua running environment object(not initialized yet)"]

subgraph osrm extract Flow Chart
Sol2ScriptingEnvironment --> ExtractorConstructor["include/extractor/extractor.hpp: <p></p> Extractor::Extractor() <p></p> - construct extractor object, mainly extractor configurations"]
ExtractorConstructor --> ExtractorRun["include/extractor/extractor.hpp: <p></p> Extractor::run() <p></p> - run extract process"]
end

Sol2ScriptingEnvironment -.- Sol2ScriptingEnvironmentInitializationNote["The Sol2ScriptingEnvironment object will be initialized by first call of it's method, <p></p> internally the `InitContext()` will be called. <p></p> Each thread will have one individual context when parallel use it."]
style Sol2ScriptingEnvironmentInitializationNote fill:#f9f,stroke-dasharray: 5, 5


ExtractorRun -. call .-> ParseOSMData["src/extractor/extractor.cpp: Extractor::ParseOSMData() <p></p> - load .osm.xxx file with Lua profiles, output `.osrm,.osrm.names,.osrm.properties` file"]

subgraph extract process Flow Chart

ParseOSMData --> NodeBasedGraphFactory["include/extractor/node_based_graph_factory.hpp: NodeBasedGraphFactory::NodeBasedGraphFactory() <p></p> - loads the `*.osrm` file and transforms the data within into the node-based graph to represent the OSM network. <p></p> - includes geometry compression, annotation data optimisation and many other aspects"]
NodeBasedGraphFactory --> FilesReadNames["include/extractor/files.hpp: files::readNames() <p></p> - read names table from `.osrm.names` file"]
FilesReadNames --> guidanceFindSegregatedNodes["include/guidance/segregated_intersection_classification.hpp: guidance::findSegregatedNodes() <p></p> - Find all segregated edges, e.g. edges that can be skipped in turn instructions. <p><p> - The main cases are: <p></p>   -- middle edges between two osm ways in one logic road (U-turn) <p></p> -- staggered intersections (X-cross) <p></p> -- square/circle intersections"]
guidanceFindSegregatedNodes --> FilesWriteNodesNBGNodes["include/extractor/files.hpp: files::writeNodes() <p></p> - write NodeBasedGraph graph nodes to `.osrm.nbg_nodes` file "]
FilesWriteNodesNBGNodes --> ReleaseOsmNodes["include/extractor/node_based_graph_factory.hpp: NodeBasedGraphFactory::ReleaseOsmNodes() <p></p> - release memory of OSM nodes (done with OSM nodes) "]
ReleaseOsmNodes --> FilesWriteCompressedNodeBasedGraph["include/extractor/files.hpp: files::writeCompressedNodeBasedGraph() <p></p> - write NodeBasedGraph to `.osrm.cnbg` file "]
FilesWriteCompressedNodeBasedGraph --> ExtractorBuildEdgeExpandedGraph["src/extractor/extractor.cpp: Extractor::BuildEdgeExpandedGraph() <p></p> - Building an edge-expanded graph from node-based input and turn restrictions <p></p> - will write files: <p></p> -- .osrm.turn_weight_penalties <p></p> -- .osrm.turn_duration_penalties <p></p> -- .osrm.turn_penalties_index <p></p> -- .osrm.cnbg_to_ebg <p></p> -- .osrm.restrictions <p></p> -- .osrm.maneuver_overrides "]
ExtractorBuildEdgeExpandedGraph --> ExtractorProcessGuidanceTurns["src/extractor/extractor.cpp: Extractor::ProcessGuidanceTurns() <p></p> - will write files: <p></p> -- .osrm.icd <p></p> -- .osrm.tld <p></p> -- .osrm.tls <p></p> -- .osrm.edges "]
ExtractorProcessGuidanceTurns --> FilesWriteSegmentData["include/extractor/files.hpp: files::writeSegmentData() <p></p> - write `.osrm.geometry` file "]
FilesWriteSegmentData --> FilesWriteEdgeBasedNodeWeightsDurations["include/extractor/files.hpp: files::writeEdgeBasedNodeWeightsDurations() <p></p> - write `.osrm.enw` file "]
FilesWriteEdgeBasedNodeWeightsDurations --> FindComponents["src/extractor/extractor.cpp: Extractor::FindComponents()"]
FindComponents --> BuildRTree["src/extractor/extractor.cpp: Extractor::BuildRTree()"]
BuildRTree --> FilesWriteNodeData["include/extractor/files.hpp: files::writeNodeData() <p></p> - write `.osrm.ebg_nodes` file "]
FilesWriteNodeData --> FilesWriteEdgeBasedGraph["include/extractor/files.hpp: files::writeEdgeBasedGraph() <p></p> - write `.osrm.ebg` file "]

end

ParseOSMData -. call .-> ParsingRelationsPipelineBufferReader["buffer_reader() <p></p> - by `osmium::io::Reader` "]
subgraph Parsing Relations Parallel Pipeline
ParsingRelationsPipelineBufferReader -.-> ParsingRelationsPipelineBufferRelationCache["buffer_relation_cache()"]
ParsingRelationsPipelineBufferRelationCache -.-> ParsingRelationsPipelineBufferStorageRelation["buffer_storage_relation()"]
end

ParsingRelationsPipelineBufferStorageRelation -.-> ParsingNodesWaysPipelineBufferReader["buffer_reader() <p></p> - by `osmium::io::Reader` "]
subgraph Parsing Nodes Ways Parallel Pipeline
ParsingNodesWaysPipelineBufferReader -.-> ParsingNodesWaysPipelineBufferTransformer["buffer_transformer()"]
ParsingNodesWaysPipelineBufferTransformer -.-> ParsingRelationsPipelineBufferStorage["buffer_storage()"]
end

ParsingNodesWaysPipelineBufferTransformer -.- Sol2ScriptingEnvironmentProcessElements["Sol2ScriptingEnvironment::ProcessElements() will be called inside, <p></p> which will call `process_node()/process_way()` from `Lua` script"]
style Sol2ScriptingEnvironmentProcessElements fill:#f9f,stroke-dasharray: 5, 5

ParsingRelationsPipelineBufferStorage -.-> ExtractionContainersPrepareData["`ExtractionContainers::PrepareData()` <p></p>- Processes the collected data and serializes it."]
ExtractionContainersPrepareData -.- Sol2ScriptingEnvironmentProcessSegment["Sol2ScriptingEnvironment::ProcessSegment() will be called inside, <p></p>which will call `process_segment()` from `Lua` script<p></p>- Noted that this function is NOT defined in `car.lua` for now"]
style Sol2ScriptingEnvironmentProcessSegment fill:#f9f,stroke-dasharray: 5, 5


subgraph NodeBasedGraphFactory Constructor
NodeBasedGraphFactory -. call .-> NodeBasedGraphFactoryLoadDataFromFile["NodeBasedGraphFactory::LoadDataFromFile() <p></p> Get the information from the *.osrm file <p></p>and prepare the graph creation process"]
NodeBasedGraphFactoryLoadDataFromFile --> NodeBasedGraphFactoryCompress["NodeBasedGraphFactory::Compress() <p></p>Compress the node-based graph into a compact representation of itself."]
NodeBasedGraphFactoryCompress --> NodeBasedGraphFactoryCompressGeometry["NodeBasedGraphFactory::CompressGeometry()"]
NodeBasedGraphFactoryCompressGeometry --> NodeBasedGraphFactoryCompressAnnotationData["NodeBasedGraphFactory::CompressAnnotationData()"]
end

NodeBasedGraphFactoryCompress -. call .-> GraphCompressorCompress["GraphCompressor::Compress()"]
GraphCompressorCompress -.- Sol2ScriptingEnvironmentProcessTurn["Sol2ScriptingEnvironment::ProcessTurn() will be called inside, <p></p>which will call `process_turn()` from `Lua` script"]
style Sol2ScriptingEnvironmentProcessTurn fill:#f9f,stroke-dasharray: 5, 5


ExtractorBuildEdgeExpandedGraph -. call .-> EdgeBasedGraphFactory["Construct EdgeBasedGraphFactory, <p></p> then call `EdgeBasedGraphFactory::Run()` to generate edge based graph"]
EdgeBasedGraphFactory -.- Sol2ScriptingEnvironmentProcessTurn


FilesWriteEdgeBasedGraph --> End("End")


